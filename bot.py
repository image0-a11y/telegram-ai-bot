import os
import requests
import time
from flask import Flask, request

app = Flask(__name__)

# Environment variables ‡¶•‡ßá‡¶ï‡ßá Token ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
HUGGINGFACE_TOKEN = os.environ.get("HUGGINGFACE_TOKEN")

# ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá (fallback ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
MODELS = [
    "facebook/blenderbot-400M-distill",  # ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶æ‡¶≤‡ßã
    "microsoft/DialoGPT-medium",  # backup
]

def send_message(chat_id, text):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text
    }
    try:
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print(f"Error sending message: {e}")

def send_typing_action(chat_id):
    """Typing indicator ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendChatAction"
    data = {
        "chat_id": chat_id,
        "action": "typing"
    }
    try:
        requests.post(url, data=data, timeout=5)
    except:
        pass

def get_ai_response(user_message):
    """Hugging Face AI ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    
    for model in MODELS:
        try:
            API_URL = f"https://api-inference.huggingface.co/models/{model}"
            headers = {"Authorization": f"Bearer {HUGGINGFACE_TOKEN}"}
            
            payload = {
                "inputs": user_message,
                "parameters": {
                    "max_new_tokens": 100,
                    "temperature": 0.8,
                    "top_p": 0.9,
                    "return_full_text": False
                },
                "options": {
                    "wait_for_model": True,
                    "use_cache": False
                }
            }
            
            # 60 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
            response = requests.post(
                API_URL, 
                headers=headers, 
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® response format handle ‡¶ï‡¶∞‡¶æ
                if isinstance(result, list) and len(result) > 0:
                    if "generated_text" in result[0]:
                        return result[0]["generated_text"]
                    elif "text" in result[0]:
                        return result[0]["text"]
                elif isinstance(result, dict):
                    if "generated_text" in result:
                        return result["generated_text"]
                    elif "text" in result:
                        return result["text"]
                
            elif response.status_code == 503:
                # Model loading ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶™‡¶∞‡ßá‡¶∞ model try ‡¶ï‡¶∞‡ßã
                print(f"Model {model} is loading, trying next...")
                continue
                
        except requests.Timeout:
            print(f"Timeout with model {model}, trying next...")
            continue
        except Exception as e:
            print(f"Error with model {model}: {str(e)}")
            continue
    
    # ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ model fail ‡¶ï‡¶∞‡ßá
    return "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶∂‡¶ø‡¶ñ‡¶õ‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶≠‡¶æ‡¶≤‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã‡•§ üòä"

@app.route("/", methods=["POST"])
def telegram_webhook():
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    try:
        data = request.get_json()
        
        if "message" in data:
            chat_id = data["message"]["chat"]["id"]
            user_message = data["message"].get("text", "")
            
            if user_message:
                # Typing indicator ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
                send_typing_action(chat_id)
                
                # ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ commands handle ‡¶ï‡¶∞‡¶æ
                if user_message.lower() in ["/start", "/help"]:
                    welcome_msg = (
                        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø AI ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡•§\n\n"
                        "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§\n"
                        "‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø‡¶§‡ßá ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶¨‡ßá‡¶®!\n\n"
                        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
                        "- What is AI?\n"
                        "- Tell me a joke\n"
                        "- How are you?"
                    )
                    send_message(chat_id, welcome_msg)
                else:
                    # AI ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶®
                    ai_response = get_ai_response(user_message)
                    
                    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                    send_message(chat_id, ai_response)
        
        return "OK", 200
        
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        return "Error", 500

@app.route("/")
def home():
    """Bot ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    return "‚úÖ Bot is running! Send me a message on Telegram."

@app.route("/health")
def health():
    """Health check endpoint"""
    return {"status": "healthy", "bot": "online"}, 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
